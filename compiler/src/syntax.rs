use crate::token::TokenKind;

#[derive(Clone, PartialEq, Hash, Eq, Debug, strum_macros::Display)]
pub enum SyntaxKind {
    LeftParen,
    RightParen,
    LeftBrace,
    RightBrace,
    Semicolon,
    Comma,
    Colon,
    Plus,
    Minus,
    Arrow,
    Star,
    Dot,
    Equal,
    EqualEqual,
    Bang,
    BangEqual,
    Greater,
    GreaterEqual,
    Less,
    LessEqual,
    Slash,
    String,
    Ident,
    // HACK: why do we have both Numbers and Integers and Floats etc
    Number,
    Integer,
    Float,
    DoublePipe,
    DoubleAmpersand,
    Ampersand,

    IfKw,
    ElseKw,
    FnKw,
    WhileKw,
    ForKw,
    StructKw,
    ImplKw,
    LetKw,

    If,
    Else,
    Fn,
    FnApp,
    While,
    For,
    Struct,
    Impl,
    Let,

    ParamList,
    RetTy,
    Block,
    FieldList,
    IfPredicate,
    ForCommand,
    Declaration,
    Assignment,
    BinExpr,
    Literal,

    Error,
    Comment,
    Whitespace,

    Source,
}

impl From<TokenKind> for SyntaxKind {
    fn from(value: TokenKind) -> Self {
        use TokenKind::*;
        match value {
            LeftParen => Self::LeftParen,
            RightParen => Self::RightParen,
            LeftBrace => Self::LeftBrace,
            RightBrace => Self::RightBrace,
            Semicolon => Self::Semicolon,
            Comma => Self::Comma,
            Plus => Self::Plus,
            Minus => Self::Minus,
            Arrow => Self::Arrow,
            Star => Self::Star,
            Dot => Self::Dot,
            Equal => Self::Equal,
            EqualEqual => Self::EqualEqual,
            Bang => Self::Bang,
            BangEqual => Self::BangEqual,
            Greater => Self::Greater,
            GreaterEqual => Self::GreaterEqual,
            Less => Self::Less,
            LessEqual => Self::LessEqual,
            Slash => Self::Slash,
            String => Self::String,
            While => Self::WhileKw,
            For => Self::ForKw,
            Ident => Self::Ident,
            Number => Self::Number,
            Integer => Self::Integer,
            Float => Self::Float,
            Let => Self::LetKw,
            Fn => Self::FnKw,
            If => Self::IfKw,
            Else => Self::ElseKw,
            DoublePipe => Self::DoublePipe,
            DoubleAmpersand => Self::DoubleAmpersand,
            Ampersand => Self::Ampersand,
            Colon => Self::Colon,
            Struct => Self::StructKw,
            Impl => Self::ImplKw,
            Error => Self::Error,
            Comment => Self::Comment,
            Whitespace => Self::Whitespace,
        }
    }
}
